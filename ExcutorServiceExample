//Example on excutor service
package com.executor.thread;

import java.util.concurrent.ExecutionException;
import java.util.concurrent.Executor;
//import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
//import java.util.concurrent.Executor;
//import java.util.concurrent.Executor;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;


public class ExecutorServiceTest {
	
	private static Future task2=null;
	private static Future task3=null;
	
	//main method
	public static void main(String[] args) throws InterruptedException,ExecutionException {
		
		ExecutorService executor= Executors.newFixedThreadPool(2);
		Runnable task1=new Thread1("mbkrunnable",10,1000);
		  ((ExecutorService) executor).execute(task1);
		
		for(int i=0;i<2;i++){
			
			//if task is not created or task is cannceled or tsk is completed 
			
			if((task2==null) ||(task2.isDone()) || task2.isCancelled()){
				//submit task return a future 
				task2=((java.util.concurrent.ExecutorService) executor).submit(new Thread1("task2",15,1000));
				
				
			}
			
			//if task is not created or task is cannceled or tsk is completed
			if((task3==null) ||(task3.isDone()) || task3.isCancelled()){
				//submit task return a future 
				task3=((java.util.concurrent.ExecutorService) executor).submit(new Thread1("task3",25,2000));
			}
			
			//if task has fnfisehed
			if(task2.get()==null){
				System.out.println(i+1 +" 0 Task2 terminated sucessfully");
			} else{
				
				//if it does not finfished canell it 
				task2.cancel(true);
			}
			
			if(task3.get()==null){
				System.out.println(i+1 +" 0 Task2 terminated sucessfully");
			} else{
				
				//if it does not finfished canell it 
				task3.cancel(true);
			}
			
		}
		
		((java.util.concurrent.ExecutorService) executor).shutdown();
		System.out.println("*****************");
		((ExecutorService) executor).awaitTermination(1, TimeUnit.SECONDS);
		
			        System.out.println("All tasks are finished!");
		
		
		
	
	}
	
	

}
